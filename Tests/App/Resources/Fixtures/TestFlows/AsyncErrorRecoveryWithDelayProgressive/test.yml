steps:
  - {type: handle, from: test://queues/delayRecoveryAsyncRecoverableWithDelayProgressive, in: 1, out: 1}

  # Configure the handler with a 5 second delay
  - {type: configureHandler, name: async, retryDelay: 5, retryStrategy: progressive, retryDelayFactor: 2}

  # Consume a first time
  - {type: consume, uri: queue://main/delayRecoveryAsyncRecoverableWithDelayProgressive, amount: 1}

  # Check that the message was partially processed
  - {type: checkSpy, path: before_error/recoverableDelayProgressive, values: [6]}

  # Check that we can recover and that previous steps are not repeated
  - {type: consume, uri: queue://main/delayRecoveryAsyncRecoverableWithDelayProgressive, amount: 1}

  - {type: checkSpy, path: before_error/recoverableDelayProgressive, values: [6]}

  # Check that the message still didn't succeed
  - {type: checkSpy, path: after_error/recoverableDelayProgressive, values: []}

  # Wait until the end of the delay
  - {type: wait, delay: 5}

  # Check that we can recover and that previous steps are not repeated
  - {type: consume, uri: queue://main/delayRecoveryAsyncRecoverableWithDelayProgressive, amount: 1}

  - {type: checkSpy, path: before_error/recoverableDelayProgressive, values: [6]}

  - {type: checkSpy, path: after_error/recoverableDelayProgressive, values: []}

  - {type: wait, delay: 5}

  # Check that we can the delay is still not finished
  - {type: consume, uri: queue://main/delayRecoveryAsyncRecoverableWithDelayProgressive, amount: 1}

  - {type: checkSpy, path: before_error/recoverableDelayProgressive, values: [6]}

  - {type: checkSpy, path: after_error/recoverableDelayProgressive, values: []}

  - {type: wait, delay: 5}

  # Check that we can recover and that previous steps are not repeated
  - {type: consume, uri: queue://main/delayRecoveryAsyncRecoverableWithDelayProgressive, amount: 1}

  - {type: checkSpy, path: before_error/recoverableDelayProgressive, values: [6]}

  # Check the final value
  - {type: checkSpy, path: after_error/recoverableDelayProgressive, values: [11]}

  # Reset the handler
  - {type: configureHandler, name: async, retryDelay: 0}
